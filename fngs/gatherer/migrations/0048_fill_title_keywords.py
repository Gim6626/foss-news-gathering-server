# Generated by Django 2.2.13 on 2021-07-14 04:03
import logging
import os
import json

from django.db import migrations, models
from gatherer.models import Keyword, DigestRecord


def fill_title_keywords(apps, schema_editor):
    not_found_keywords = []
    duplicated_keywords = []
    not_matched_keywords_lists = []
    for digest_record in DigestRecord.objects.all():
        if not digest_record.keywords:
            continue
        keywords = digest_record.keywords.split(';')
        keywords_to_store = []
        for keyword in keywords:
            keywords_from_db = Keyword.objects.filter(name__iexact=keyword)
            keywords_from_db_len = len(keywords_from_db)
            if keywords_from_db_len == 0:
                logging.error(f'Failed to find keyword "{keyword}" from digest record #{digest_record.id}')
                if keyword not in not_found_keywords:
                    not_found_keywords.append(keyword)
                continue
            elif keywords_from_db_len > 1:
                not_matched_even_by_category = []
                keywords_from_db_filtered_from_duplicates = []
                for keyword_from_db_1 in keywords_from_db:
                    already_exists = False
                    found_duplicate = None
                    for keyword_from_db_2 in keywords_from_db_filtered_from_duplicates:
                        if keyword_from_db_1.name == keyword_from_db_2.name and (keyword_from_db_1.category == keyword_from_db_2.category or keyword_from_db_1.category is None or keyword_from_db_2.category is None):
                            already_exists = True
                            found_duplicate = keyword_from_db_2
                            break
                    if not already_exists:
                        keywords_from_db_filtered_from_duplicates.append(keyword_from_db_1)
                    elif found_duplicate.category is None and keyword_from_db_1.category is not None:
                        keywords_from_db_filtered_from_duplicates.remove(found_duplicate)
                        keywords_from_db_filtered_from_duplicates.append(keyword_from_db_1)
                if len(keywords_from_db_filtered_from_duplicates) == 1:
                    keywords_to_store.append(keywords_from_db_filtered_from_duplicates[0])
                else:
                    for keyword_from_db in keywords_from_db_filtered_from_duplicates:
                        if keyword_from_db.category == digest_record.subcategory:
                            keywords_to_store.append(keyword_from_db)
                    for keyword_from_db in keywords_from_db_filtered_from_duplicates:
                        if keyword_from_db.name.lower() not in [k.name.lower() for k in keywords_to_store]:
                            not_matched_even_by_category.append(keyword)
                    if not_matched_even_by_category:
                        not_matched_keywords_lists.append(not_matched_even_by_category)
                        logging.error(f'Could not match keywords {not_matched_even_by_category} for digest record #{digest_record.id} "{digest_record.title}"')
                    continue
            keywords_to_store.append(keywords_from_db[0])
        digest_record.title_keywords.set(keywords_to_store)
        digest_record.save()


class Migration(migrations.Migration):

    dependencies = [
        ('gatherer', '0047_fill_lf_keywords'),
    ]

    operations = [
        migrations.RunPython(fill_title_keywords, migrations.RunPython.noop),
    ]
